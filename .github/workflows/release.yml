name: Release

on:
  workflow_dispatch:
    inputs: 
      release-type:
        description: type of release
        required: true
        type: choice
        options: [major, minor, patch]
      tag-message:
        description: description of release
        required: false

env:
  AUTHOR_EMAIL_VAR: ${{ format('author_email_{0}', github.event.sender.login) }}
  PYPI_TOKEN_VAR: ${{ format('pypi_token_{0}', github.event.sender.login) }}

jobs:
  release:
    runs-on: ubuntu-latest

    if: secrets[env.PYPI_TOKEN_VAR] && secrets[env.AUTHOR_EMAIL_VAR]

    steps:
      # neither sender name nor email are provided to the workflow;
      # and, email isn't reliably available from API (hence the secret)
      - name: Look up sender's name
        id: sender-name
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const info = await github.request(github.event.sender.url)
            return info.name

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install management dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirement/dev.txt

      - name: Bump version, build & release to PyPI
        run: manage --show version --message "$TAG_MESSAGE" --build --release ${{ github.event.inputs.release-type }}
        env:
          # don't attempt to handle proper interpolation of message in-shell
          TAG_MESSAGE: ${{ github.event.inputs.tag-message }}
          GIT_AUTHOR_NAME: ${{ steps.sender-name.outputs.result }}
          GIT_AUTHOR_EMAIL: ${{ secrets[env.AUTHOR_EMAIL_VAR] }}
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets[env.PYPI_TOKEN_VAR] }}

      - name: Push version bump & tag
        run: |
          git push
          git push --tags

      - name: Log in to the Container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Discover latest tag
        id: latest-tag
        run: echo ::set-output name=name::"$(git tag --list --sort=version:refname | tail -n 1)"

      - name: Build image & push to GitHub container registry
        run: manage --show image build --push ${{ steps.latest-tag.outputs.name }}
